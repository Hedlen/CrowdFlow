cmake_minimum_required (VERSION 2.8.11)
project (pytrajectory)

set(CMAKE_BUILD_TYPE Release)
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -fext-numeric-literals ")
elseif(COMPILER_SUPPORTS_CXX0X)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x -fext-numeric-literals ")
else()
        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

FIND_PACKAGE(PythonInterp 3  REQUIRED)
FIND_PACKAGE(PythonLibs 3  REQUIRED)
FIND_PACKAGE(OpenCV 3.4 REQUIRED )

if (NOT IS_ABSOLUTE ${BOOST_ROOT})
  set(BOOST_ROOT "${CMAKE_CURRENT_BINARY_DIR}/${BOOST_ROOT}")
endif()
message(STATUS "${BOOST_ROOT}")
if(EXISTS "${BOOST_ROOT}/lib/libboost_python3.a")
    FIND_PACKAGE(Boost COMPONENTS python3 numpy3)
elseif(EXISTS "${BOOST_ROOT}/lib/libboost_python34.a")
	FIND_PACKAGE(Boost COMPONENTS python34 numpy34)
elseif(EXISTS "${BOOST_ROOT}/lib/libboost_python35.a")
	FIND_PACKAGE(Boost COMPONENTS python35 numpy35)
elseif(EXISTS "${BOOST_ROOT}/lib/libboost_python36.a")
	FIND_PACKAGE(Boost COMPONENTS python36 numpy36)
elseif(EXISTS "${BOOST_ROOT}/lib/libboost_python37.a")
	FIND_PACKAGE(Boost COMPONENTS python37 numpy37)
elseif(EXISTS "${BOOST_ROOT}/lib/libboost_python38.a")
	FIND_PACKAGE(Boost COMPONENTS python38 numpy38)
else()
	message(STATUS "Unable to find libboost_python3x.a to specify the correct version.")
endif()

INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS} include )
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS} )
INCLUDE_DIRECTORIES( ${PYTHON_INCLUDE_DIRS} )
INCLUDE_DIRECTORIES( ${PythonInterp_INCLUDE_DIRS} )
INCLUDE_DIRECTORIES( ${NUMPY_INCLUDE_DIR} )

message("Include dirs of Python: " ${PYTHON_INCLUDE_DIRS} "(" ${PYTHONLIBS_VERSION_STRING}  ")")

link_directories(${Boost_LIBRARY_PATH} )

file(GLOB project_sources ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp )

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")

PYTHON_ADD_MODULE(pytrajectory python_module.cpp ${project_sources} )

TARGET_LINK_LIBRARIES(pytrajectory LINK_PUBLIC ${OpenCV_LIBS} ${Boost_LIBRARIES} )
